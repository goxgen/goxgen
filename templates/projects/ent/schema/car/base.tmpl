{{- /* gotype: github.com/goxgen/goxgen.EntProject */ -}}
{{- define "BaseTemplate" -}}

package schema

import (
    "entgo.io/contrib/entgql"
    "entgo.io/ent"
    "entgo.io/ent/schema"
    "entgo.io/ent/schema/edge"
    "entgo.io/ent/schema/field"
    "github.com/google/uuid"
)

type Car struct {
    ent.Schema
}

func (Car) Fields() []ent.Field {
    return []ent.Field{
        field.UUID("id", uuid.UUID{}).
            Default(uuid.New).
                Annotations(
                    entgql.OrderField("ID"),
                ),
        field.String("make").
            MaxLen(32).
                Annotations(
                    entgql.OrderField("MAKE"),
                ),
        field.String("model").
            MaxLen(32).
                Annotations(
                    entgql.OrderField("MODEL"),
                ),
        field.String("description").
                Annotations(
                    entgql.OrderField("DESCRIPTION"),
                ).
            MaxLen(128),
    }
}

func (Car) Edges() []ent.Edge {
    return []ent.Edge{
        edge.From("user", User.Type).
            Ref("cars").
            Unique(),
    }
}

func (Car) Annotations() []schema.Annotation {
    return []schema.Annotation{
        entgql.RelayConnection(),
        entgql.QueryField(),
        entgql.Mutations(entgql.MutationCreate(), entgql.MutationUpdate()),
    }
}


{{- end -}}