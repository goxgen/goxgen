// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"fmt"
	"io"
	"strconv"
)

// This directive is used to mark the object as a resource action
type Action struct {
	Resource        string                 `json:"Resource"`
	Action          XgenResourceActionType `json:"Action"`
	Route           *string                `json:"Route,omitempty"`
	SchemaFieldName *string                `json:"SchemaFieldName,omitempty"`
}

type ActionAnnotationSingle struct {
	Name  *string `json:"name,omitempty"`
	Value *Action `json:"value,omitempty"`
}

// This directive is used to mark the object as a resource field
type ActionField struct {
	Label       *string `json:"Label,omitempty"`
	Description *string `json:"Description,omitempty"`
	// Map field to resource field, {resource}.{field}, eg. user.id
	MapTo []string `json:"MapTo,omitempty"`
}

type CustomTodo struct {
	Text    string `json:"text"`
	UserID  int    `json:"userId"`
	Code    string `json:"code"`
	Custom  string `json:"custom"`
	Custom2 string `json:"custom2"`
}

type CustomTodoXgenDef struct {
	Object *XgenObjectDefinition `json:"object,omitempty"`
	Field  []*XgenObjectField    `json:"field"`
}

type DeleteTodo struct {
	ID int `json:"id"`
}

type DeleteTodoXgenDef struct {
	Object *XgenObjectDefinition `json:"object,omitempty"`
	Field  []*XgenObjectField    `json:"field"`
}

// This directive is used to mark the object as a resource field
type Field struct {
	Label       *string `json:"Label,omitempty"`
	Description *string `json:"Description,omitempty"`
}

// This directive is used to mark the object as a resource list action
type ListAction struct {
	Resource        string                     `json:"Resource"`
	Action          XgenResourceListActionType `json:"Action"`
	Route           *string                    `json:"Route,omitempty"`
	Pagination      *bool                      `json:"Pagination,omitempty"`
	Sort            *XgenSortResourceConfig    `json:"Sort,omitempty"`
	SchemaFieldName *string                    `json:"SchemaFieldName,omitempty"`
}

type ListActionAnnotationSingle struct {
	Name  *string     `json:"name,omitempty"`
	Value *ListAction `json:"value,omitempty"`
}

type ListTodo struct {
	ID     int    `json:"id" mapto:""`
	Text   string `json:"text" mapto:""`
	Done   bool   `json:"done" mapto:""`
	UserID int    `json:"userId" mapto:""`
	Code   string `json:"code" mapto:""`
}

type ListTodoXgenDef struct {
	Object *XgenObjectDefinition `json:"object,omitempty"`
	Field  []*XgenObjectField    `json:"field"`
}

type NewTodo struct {
	Text   string `json:"text" mapto:""`
	UserID int    `json:"userId" mapto:""`
	Code   string `json:"code" mapto:""`
}

type NewTodoXgenDef struct {
	Object *XgenObjectDefinition `json:"object,omitempty"`
	Field  []*XgenObjectField    `json:"field"`
}

type NewUser struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type NewUserXgenDef struct {
	Object *XgenObjectDefinition `json:"object,omitempty"`
	Field  []*XgenObjectField    `json:"field"`
}

// This directive is used to mark the object as a resource
type Resource struct {
	Name    string  `json:"Name"`
	Route   *string `json:"Route,omitempty"`
	Primary *bool   `json:"Primary,omitempty"`
}

type ResourceAnnotationSingle struct {
	Name  *string   `json:"name,omitempty"`
	Value *Resource `json:"value,omitempty"`
}

type Todo struct {
	ID   int    `json:"id"`
	Text string `json:"text"`
	Done bool   `json:"done"`
	User *User  `json:"user"`
}

type TodoSingleSortInput struct {
	Field     TodoSortableField  `json:"field"`
	Direction *XgenSortDirection `json:"direction,omitempty"`
}

type TodoSortInput struct {
	By []*TodoSingleSortInput `json:"by,omitempty"`
}

type TodoXgenDef struct {
	Object *XgenObjectDefinition `json:"object,omitempty"`
	Field  []*XgenObjectField    `json:"field"`
}

type UpdateTodo struct {
	Text   string `json:"text"`
	UserID int    `json:"userId"`
	Code   string `json:"code"`
}

type UpdateTodoXgenDef struct {
	Object *XgenObjectDefinition `json:"object,omitempty"`
	Field  []*XgenObjectField    `json:"field"`
}

type UpdateUser struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type UpdateUserXgenDef struct {
	Object *XgenObjectDefinition `json:"object,omitempty"`
	Field  []*XgenObjectField    `json:"field"`
}

type User struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type UserList struct {
	ID   *int    `json:"id,omitempty" mapto:""`
	Name *string `json:"name,omitempty" mapto:""`
}

type UserListXgenDef struct {
	Object *XgenObjectDefinition `json:"object,omitempty"`
	Field  []*XgenObjectField    `json:"field"`
}

type UserSingleSortInput struct {
	Field     UserSortableField  `json:"field"`
	Direction *XgenSortDirection `json:"direction,omitempty"`
}

type UserSortInput struct {
	By []*UserSingleSortInput `json:"by,omitempty"`
}

type UserXgenDef struct {
	Object *XgenObjectDefinition `json:"object,omitempty"`
	Field  []*XgenObjectField    `json:"field"`
}

type XgenAnnotationMap struct {
	Resource   []*ResourceAnnotationSingle   `json:"Resource"`
	ListAction []*ListActionAnnotationSingle `json:"ListAction"`
	Action     []*ActionAnnotationSingle     `json:"Action"`
}

type XgenCursorPaginationInput struct {
	First  int     `json:"first"`
	After  *string `json:"after,omitempty"`
	Last   int     `json:"last"`
	Before *string `json:"before,omitempty"`
}

type XgenCursorPaginationInputXgenDef struct {
	Object *XgenObjectDefinition `json:"object,omitempty"`
	Field  []*XgenObjectField    `json:"field"`
}

type XgenFieldDef struct {
	ActionField *ActionField `json:"ActionField,omitempty"`
	Field       *Field       `json:"Field,omitempty"`
}

type XgenIntrospection struct {
	Annotation *XgenAnnotationMap `json:"annotation,omitempty"`
	Object     *XgenObjectMap     `json:"object,omitempty"`
	Resource   *XgenResourceMap   `json:"resource,omitempty"`
}

type XgenObjectDefinition struct {
	Resource   *Resource   `json:"Resource,omitempty"`
	Action     *Action     `json:"Action,omitempty"`
	ListAction *ListAction `json:"ListAction,omitempty"`
}

type XgenObjectField struct {
	Name       *string       `json:"name,omitempty"`
	Definition *XgenFieldDef `json:"definition,omitempty"`
}

type XgenObjectMap struct {
	DeleteTodo                     *DeleteTodoXgenDef                     `json:"DeleteTodo,omitempty"`
	XgenResourceDbConfigInput      *XgenResourceDbConfigInputXgenDef      `json:"XgenResourceDbConfigInput,omitempty"`
	XgenPaginationInput            *XgenPaginationInputXgenDef            `json:"XgenPaginationInput,omitempty"`
	XgenSortInput                  *XgenSortInputXgenDef                  `json:"XgenSortInput,omitempty"`
	CustomTodo                     *CustomTodoXgenDef                     `json:"CustomTodo,omitempty"`
	XgenResourceActionType         *XgenResourceActionTypeXgenDef         `json:"XgenResourceActionType,omitempty"`
	UserList                       *UserListXgenDef                       `json:"UserList,omitempty"`
	XgenSort                       *XgenSortXgenDef                       `json:"XgenSort,omitempty"`
	UpdateTodo                     *UpdateTodoXgenDef                     `json:"UpdateTodo,omitempty"`
	XgenSortResourceConfig         *XgenSortResourceConfigXgenDef         `json:"XgenSortResourceConfig,omitempty"`
	ListTodo                       *ListTodoXgenDef                       `json:"ListTodo,omitempty"`
	NewUser                        *NewUserXgenDef                        `json:"NewUser,omitempty"`
	NewTodo                        *NewTodoXgenDef                        `json:"NewTodo,omitempty"`
	XgenResourceListActionType     *XgenResourceListActionTypeXgenDef     `json:"XgenResourceListActionType,omitempty"`
	User                           *UserXgenDef                           `json:"User,omitempty"`
	XgenSortResourceConfigInput    *XgenSortResourceConfigInputXgenDef    `json:"XgenSortResourceConfigInput,omitempty"`
	XgenResourceFieldDbConfigInput *XgenResourceFieldDbConfigInputXgenDef `json:"XgenResourceFieldDbConfigInput,omitempty"`
	XgenCursorPaginationInput      *XgenCursorPaginationInputXgenDef      `json:"XgenCursorPaginationInput,omitempty"`
	UpdateUser                     *UpdateUserXgenDef                     `json:"UpdateUser,omitempty"`
	XgenSortDirection              *XgenSortDirectionXgenDef              `json:"XgenSortDirection,omitempty"`
	Todo                           *TodoXgenDef                           `json:"Todo,omitempty"`
}

type XgenPaginationInput struct {
	Page int `json:"page"`
	Size int `json:"size"`
}

type XgenPaginationInputXgenDef struct {
	Object *XgenObjectDefinition `json:"object,omitempty"`
	Field  []*XgenObjectField    `json:"field"`
}

type XgenResourceAction struct {
	Resource        string                 `json:"Resource"`
	Action          XgenResourceActionType `json:"Action"`
	Route           *string                `json:"Route,omitempty"`
	SchemaFieldName *string                `json:"SchemaFieldName,omitempty"`
}

type XgenResourceActionTypeXgenDef struct {
	Object *XgenObjectDefinition `json:"object,omitempty"`
	Field  []*XgenObjectField    `json:"field"`
}

type XgenResourceDbConfigInput struct {
	Table *string `json:"Table,omitempty"`
}

type XgenResourceDbConfigInputXgenDef struct {
	Object *XgenObjectDefinition `json:"object,omitempty"`
	Field  []*XgenObjectField    `json:"field"`
}

type XgenResourceDefinition struct {
	ObjectName *string               `json:"objectName,omitempty"`
	Properties *XgenResourceProperty `json:"properties,omitempty"`
	Actions    []*XgenResourceAction `json:"actions"`
}

type XgenResourceFieldDbConfigInput struct {
	Column                 *string `json:"Column,omitempty"`
	PrimaryKey             *bool   `json:"PrimaryKey,omitempty"`
	AutoIncrement          *bool   `json:"AutoIncrement,omitempty"`
	Unique                 *bool   `json:"Unique,omitempty"`
	NotNull                *bool   `json:"NotNull,omitempty"`
	Index                  *bool   `json:"Index,omitempty"`
	UniqueIndex            *bool   `json:"UniqueIndex,omitempty"`
	Size                   *int    `json:"Size,omitempty"`
	Precision              *int    `json:"Precision,omitempty"`
	Type                   *string `json:"Type,omitempty"`
	Scale                  *int    `json:"Scale,omitempty"`
	AutoIncrementIncrement *int    `json:"AutoIncrementIncrement,omitempty"`
}

type XgenResourceFieldDbConfigInputXgenDef struct {
	Object *XgenObjectDefinition `json:"object,omitempty"`
	Field  []*XgenObjectField    `json:"field"`
}

type XgenResourceListActionTypeXgenDef struct {
	Object *XgenObjectDefinition `json:"object,omitempty"`
	Field  []*XgenObjectField    `json:"field"`
}

type XgenResourceMap struct {
	Todo *XgenResourceDefinition `json:"todo,omitempty"`
	User *XgenResourceDefinition `json:"user,omitempty"`
}

type XgenResourceProperty struct {
	Name    string  `json:"Name"`
	Route   *string `json:"Route,omitempty"`
	Primary *bool   `json:"Primary,omitempty"`
}

type XgenSort struct {
	By        string             `json:"by"`
	Direction *XgenSortDirection `json:"direction,omitempty"`
}

type XgenSortDirectionXgenDef struct {
	Object *XgenObjectDefinition `json:"object,omitempty"`
	Field  []*XgenObjectField    `json:"field"`
}

type XgenSortInput struct {
	By        string             `json:"by"`
	Direction *XgenSortDirection `json:"direction,omitempty"`
}

type XgenSortInputXgenDef struct {
	Object *XgenObjectDefinition `json:"object,omitempty"`
	Field  []*XgenObjectField    `json:"field"`
}

type XgenSortResourceConfig struct {
	// If set to true, the sort will be disabled.
	Disabled *bool       `json:"Disabled,omitempty"`
	Default  []*XgenSort `json:"Default,omitempty"`
}

type XgenSortResourceConfigInput struct {
	// If set to true, the sort will be disabled.
	Disabled *bool            `json:"Disabled,omitempty"`
	Default  []*XgenSortInput `json:"Default,omitempty"`
}

type XgenSortResourceConfigInputXgenDef struct {
	Object *XgenObjectDefinition `json:"object,omitempty"`
	Field  []*XgenObjectField    `json:"field"`
}

type XgenSortResourceConfigXgenDef struct {
	Object *XgenObjectDefinition `json:"object,omitempty"`
	Field  []*XgenObjectField    `json:"field"`
}

type XgenSortXgenDef struct {
	Object *XgenObjectDefinition `json:"object,omitempty"`
	Field  []*XgenObjectField    `json:"field"`
}

type TodoSortableField string

const (
	TodoSortableFieldID   TodoSortableField = "id"
	TodoSortableFieldText TodoSortableField = "text"
	TodoSortableFieldDone TodoSortableField = "done"
	TodoSortableFieldUser TodoSortableField = "user"
)

var AllTodoSortableField = []TodoSortableField{
	TodoSortableFieldID,
	TodoSortableFieldText,
	TodoSortableFieldDone,
	TodoSortableFieldUser,
}

func (e TodoSortableField) IsValid() bool {
	switch e {
	case TodoSortableFieldID, TodoSortableFieldText, TodoSortableFieldDone, TodoSortableFieldUser:
		return true
	}
	return false
}

func (e TodoSortableField) String() string {
	return string(e)
}

func (e *TodoSortableField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TodoSortableField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TODO_SORTABLE_FIELD", str)
	}
	return nil
}

func (e TodoSortableField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserSortableField string

const (
	UserSortableFieldID   UserSortableField = "id"
	UserSortableFieldName UserSortableField = "name"
)

var AllUserSortableField = []UserSortableField{
	UserSortableFieldID,
	UserSortableFieldName,
}

func (e UserSortableField) IsValid() bool {
	switch e {
	case UserSortableFieldID, UserSortableFieldName:
		return true
	}
	return false
}

func (e UserSortableField) String() string {
	return string(e)
}

func (e *UserSortableField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserSortableField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid USER_SORTABLE_FIELD", str)
	}
	return nil
}

func (e UserSortableField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type XgenResourceActionType string

const (
	XgenResourceActionTypeCreateMutation XgenResourceActionType = "CREATE_MUTATION"
	XgenResourceActionTypeReadQuery      XgenResourceActionType = "READ_QUERY"
	XgenResourceActionTypeUpdateMutation XgenResourceActionType = "UPDATE_MUTATION"
	XgenResourceActionTypeDeleteMutation XgenResourceActionType = "DELETE_MUTATION"
	XgenResourceActionTypeCustomMutation XgenResourceActionType = "CUSTOM_MUTATION"
)

var AllXgenResourceActionType = []XgenResourceActionType{
	XgenResourceActionTypeCreateMutation,
	XgenResourceActionTypeReadQuery,
	XgenResourceActionTypeUpdateMutation,
	XgenResourceActionTypeDeleteMutation,
	XgenResourceActionTypeCustomMutation,
}

func (e XgenResourceActionType) IsValid() bool {
	switch e {
	case XgenResourceActionTypeCreateMutation, XgenResourceActionTypeReadQuery, XgenResourceActionTypeUpdateMutation, XgenResourceActionTypeDeleteMutation, XgenResourceActionTypeCustomMutation:
		return true
	}
	return false
}

func (e XgenResourceActionType) String() string {
	return string(e)
}

func (e *XgenResourceActionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = XgenResourceActionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid XgenResourceActionType", str)
	}
	return nil
}

func (e XgenResourceActionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type XgenResourceListActionType string

const (
	XgenResourceListActionTypeBrowseQuery         XgenResourceListActionType = "BROWSE_QUERY"
	XgenResourceListActionTypeBatchDeleteMutation XgenResourceListActionType = "BATCH_DELETE_MUTATION"
)

var AllXgenResourceListActionType = []XgenResourceListActionType{
	XgenResourceListActionTypeBrowseQuery,
	XgenResourceListActionTypeBatchDeleteMutation,
}

func (e XgenResourceListActionType) IsValid() bool {
	switch e {
	case XgenResourceListActionTypeBrowseQuery, XgenResourceListActionTypeBatchDeleteMutation:
		return true
	}
	return false
}

func (e XgenResourceListActionType) String() string {
	return string(e)
}

func (e *XgenResourceListActionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = XgenResourceListActionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid XgenResourceListActionType", str)
	}
	return nil
}

func (e XgenResourceListActionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type XgenSortDirection string

const (
	XgenSortDirectionAsc  XgenSortDirection = "ASC"
	XgenSortDirectionDesc XgenSortDirection = "DESC"
)

var AllXgenSortDirection = []XgenSortDirection{
	XgenSortDirectionAsc,
	XgenSortDirectionDesc,
}

func (e XgenSortDirection) IsValid() bool {
	switch e {
	case XgenSortDirectionAsc, XgenSortDirectionDesc:
		return true
	}
	return false
}

func (e XgenSortDirection) String() string {
	return string(e)
}

func (e *XgenSortDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = XgenSortDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid XgenSortDirection", str)
	}
	return nil
}

func (e XgenSortDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
