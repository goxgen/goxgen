# goxgen

[![GitHub license](https://img.shields.io/github/license/goxgen/goxgen)](https://github.com/goxgen/goxgen)
[![GitHub stars](https://img.shields.io/github/stars/goxgen/goxgen)](https://github.com/goxgen/goxgen/stargazers)
![GitHub release (latest by date)](https://img.shields.io/github/v/release/goxgen/goxgen)
[![Go Report Card](https://goreportcard.com/badge/github.com/goxgen/goxgen)](https://goreportcard.com/report/github.com/goxgen/goxgen)
[![codecov](https://codecov.io/gh/goxgen/goxgen/branch/main/graph/badge.svg?token=SDEXU6YQH9)](https://codecov.io/gh/goxgen/goxgen)

Your One-Stop Solution for GraphQL Application Generation

`goxgen` is a powerful library designed to simplify the creation of GraphQL applications.
By defining your domain and API interface through a single syntax,
You can quickly generate a fully-functional GraphQL server.
Beyond that, `goxgen` also provides support for ORM(GORM)
and a Command-Line Interface for server operations.

> Built upon the `gqlgen` framework, `goxgen` extends its
> capabilities to offer a more streamlined developer experience.

## 🌟 Features

- 📝 **Single Syntax for Domain and API:** Define your domain and API interface in GraphQL schema language.
- 📊 **GraphQL:** Schema-based application generation
- 🎛️ **ORM Support:** Seamlessly integrates with various ORM systems like GORM and ENT.
- ⚙️ **CLI Support:** Comes with a CLI tool to spin up your server application in no time.
- 📚**Domain Driven Design:** Extensible project structure
- 🛡️**Future-Ready:** Plans to roll out UI for admin back-office, along with comprehensive authentication and authorization features.

## 📦 Dependencies

- [gqlgen](https://github.com/99designs/gqlgen)
- [gorm](https://gorm.io/index.html)
- [urfave/cli](https://cli.urfave.org)

# 🚀 Quick Start

## 👣 Step-by-step guide

### 📄 Creating the necessary files

You should create two files in your project

1. Standard `gen.go` file with `go:generate` directive
{{ embedFile "cmd/internal/integration/gen.go" | indent 4 }}
2. Xgen config file `xgenc.go`
{{ embedFile "cmd/internal/integration/xgenc.go" | indent 4 }}
Then run `go generate` command, and goxgen will generate project structure

```shell
go generate
```

### 📁 Structure of a generated project

After running `go generate` command, goxgen will generate project structure like this

```shell
demoproj/
|-- entproj/
|-- gormproj/
|   |-- generate/
|   |-- generated_xgen_directives.graphql
|   |-- generated_xgen_introspection.go
|   |-- generated_xgen_introspection.graphql
|   |-- generated_xgen_project_handlers.go
|   |-- graphql.config.yml
|   |-- resolver.go
|   |-- schema.main.go
|   |-- schema.resolver.go
|-- myproject/
|-- .gitignore
|-- gen.go
|-- generated_xgen_cli.go
|-- go.mod
|-- xgenc.go
```

### 📑 Providing schema

You should provide a schema for each project and run `go generate` again.

All schema files in xgen has this format `schema.{some_name}.graphql`, for example `schema.main.graphql`


Let's focus on `gormproj`, which uses the GORM ORM.
The connection to the GORM database can be configured from the gqlgen standard `resolver.go` file in the `gormproj` directory.

> `resolver.go` is designed to support your custom dependency injection (DI) and any services you've provided.
{{ embedFile "cmd/internal/integration/gormproj/resolver.go" | codeBlock "go"}}

### Example of schema file `schema.main.graphql`
{{ embedFile "cmd/internal/integration/gormproj/schema.main.graphql" | codeBlock "graphql" }}

The directives used in the example above are standard `xgen` directives, intended to provide metadata.

* `Resource` - Entity or object or thing
* `Field` - Field of resource
* `Action` - Action that can be done for single resource
* `ListAction` - Action that can be done for bulk resources
* `ActionField` - Field of action or list action

The definitions of these directives are located in the `generated_xgen_directives.graphql` file.
{{ embedFile "cmd/internal/integration/gormproj/generated_xgen_directives.graphql" | codeBlock "graphql" }}

After writing a custom schema You should run again `gogen` command.

```shell
go generate
```

After regenerating the code, the `schema.resolver.go` file will be updated based on your schema. 
You can expect to see changes similar to the following:

{{ embedFile "cmd/internal/integration/gormproj/schema.resolver.go" | codeBlock "go" }}

You can add your own implementation for each function in the updated `schema.resolver.go` file.
For more information,
You can read the [gqlgen documentation](https://gqlgen.com/getting-started/#implement-the-resolvers). 


You can see that some functions in example are implemented, some are not. 
So take a look at the implemented functions, for example `NewUser`, `ListUser` or `DeleteUsers`.
In those functions, you can see that the `r.DB` instance is used, 
which is provided from the `resolver.go` file.

{{ embedFile "cmd/internal/integration/gormproj/resolver.go" | codeBlock "go" }}

Great, you're all set to launch your GraphQL application.

To start the server using the xgen CLI plugin, you can run the following command:

```shell
go run generated_xgen_cli.go serve --gql-playground-enabled gormproj
```

This will initialize and start your GraphQL server, making it ready to handle incoming requests.

The output from the xgen CLI will provide information about the server endpoints. Additionally, logs will be written to this output during the server's runtime, giving you insights into its operation.

```shell
2023-08-30T13:34:58.750+0400    INFO    gormproj/generated_xgen_project_handlers.go:102 Serving graphql playground      {"url": "http://localhost:80/playground"}
2023-08-30T13:34:58.750+0400    INFO    gormproj/generated_xgen_project_handlers.go:113 Serving graphql                 {"url": "http://localhost:80/query"}
```

> For more information about the xgen CLI, you can run the following command: 
> 
> `go run generated_xgen_cli.go help`
> 
> This will display a list of available commands, options, and descriptions to help you navigate the xgen CLI more effectively.

You can copy the URL `http://localhost:80/playground` from the logs 
and open it in your browser to access the GraphQL playground. 
This interface will allow you to test queries, mutations, and subscriptions in real-time.

Then we see graphql playground, let's run some mutation query to add two new users

{{- $test1 := yamlFileParse "cmd/internal/integration/gormproj/tests/user-lifecycle.yaml" }}

{{ $test1 | dig "tests" 0 "query" "n/a" | codeBlock "graphql"  }}

After execution of this mutation, graphql should be return result like this

{{ $test1 | dig "tests" 0 "expectedResult" "n/a" | codeBlock "json"  }}

One more example, let's list our new users by query

{{ $test1 | dig "tests" 1 "query" "n/a" | codeBlock "graphql"  }}

The result of this query should be like this

{{ $test1 | dig "tests" 1 "expectedResult" "n/a" | codeBlock "graphql"  }}

## 🤝 Contributing

Contributions, issues, and feature requests are welcome!

## 📝 License

Apache 2.0

## 📞 Contact

For more information, feel free to open an issue in the repository.

---

Enjoy the power of single-syntax API and domain definitions with `goxgen`! 🚀